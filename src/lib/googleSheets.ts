process.env.NODE_OPTIONS = '--openssl-legacy-provider';

import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import { Destination, Deal } from '../types';
import { cache } from 'react';

// Connexion √† Google Sheets avec les identifiants
const SHEET_ID = process.env.GOOGLE_SHEET_ID || '';
const GOOGLE_CLIENT_EMAIL = process.env.GOOGLE_CLIENT_EMAIL || '';
// Correction du formatage de la cl√© priv√©e pour r√©soudre l'erreur de d√©codage
const GOOGLE_PRIVATE_KEY = process.env.GOOGLE_PRIVATE_KEY 
  ? process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/gm, '\n')
  : '';

// Fonction de journalisation pour le service Google Sheets
const logGoogleSheetsService = (message: string) => {
  const timestamp = new Date().toISOString();
  console.log(`[GoogleSheets ${timestamp}] ${message}`);
};

// Fonction pour v√©rifier les informations d'identification
const checkCredentials = () => {
  logGoogleSheetsService('V√©rification des informations d\'identification Google Sheets...');
  
  if (!SHEET_ID) {
    logGoogleSheetsService('‚ö†Ô∏è ERREUR: ID de feuille Google manquant (GOOGLE_SHEET_ID)');
    return false;
  }
  
  if (!GOOGLE_CLIENT_EMAIL) {
    logGoogleSheetsService('‚ö†Ô∏è ERREUR: Email client Google manquant (GOOGLE_CLIENT_EMAIL)');
    return false;
  }
  
  if (!GOOGLE_PRIVATE_KEY) {
    logGoogleSheetsService('‚ö†Ô∏è ERREUR: Cl√© priv√©e Google manquante (GOOGLE_PRIVATE_KEY)');
    return false;
  }
  
  logGoogleSheetsService('‚úÖ Informations d\'identification v√©rifi√©es');
  return true;
};

// Fonction pour cr√©er un client JWT avec gestion d'erreurs am√©lior√©e
const createJWTClient = () => {
  try {
    logGoogleSheetsService('Cr√©ation du client JWT...');
    
    // V√©rifier que les identifiants sont disponibles
    if (!checkCredentials()) {
      return null;
    }
    
    // V√©rification pr√©liminaire de la cl√© priv√©e
    if (GOOGLE_PRIVATE_KEY.length < 50) {
      logGoogleSheetsService('‚ö†Ô∏è AVERTISSEMENT: La cl√© priv√©e semble trop courte ou mal format√©e');
    }
    
    logGoogleSheetsService(`Tentative d'authentification avec l'email: ${GOOGLE_CLIENT_EMAIL.substring(0, 5)}...`);
    const jwt = new JWT({
      email: GOOGLE_CLIENT_EMAIL,
      key: GOOGLE_PRIVATE_KEY,
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    
    logGoogleSheetsService('‚úÖ Client JWT cr√©√© avec succ√®s');
    return jwt;
  } catch (error) {
    logGoogleSheetsService(`‚ùå Erreur lors de la cr√©ation du client JWT: ${error}`);
    if (error instanceof Error) {
      logGoogleSheetsService(`D√©tails de l'erreur: ${error.stack}`);
    }
    return null;
  }
};

// Fonction utilitaire pour v√©rifier si une date limite est d√©pass√©e
const isExpired = (deadline?: string): boolean => {
  if (!deadline) return false;
  try {
    const deadlineDate = new Date(deadline);
    const currentDate = new Date();
    return currentDate > deadlineDate;
  } catch (e) {
    logGoogleSheetsService(`Erreur lors de la v√©rification de la date: ${e}`);
    return false;
  }
};

// Fonction utilitaire pour filtrer les √©l√©ments expir√©s
const filterExpiredItems = <T extends { deadline?: string }>(items: T[]): T[] => {
  return items.filter(item => !isExpired(item.deadline));
};

// Fonction de secours qui renvoie des donn√©es fictives en cas d'√©chec de connexion √† l'API
const getFallbackDestinations = (): Destination[] => {
  console.log('Utilisation des donn√©es de secours...');
  return [
    {
      id: '1',
      slug: 'marrakech',
      name: 'Marrakech',
      description: 'D√©couvrez la magie de Marrakech, entre souks color√©s et jardins luxuriants.',
      content: '<p>Marrakech, surnomm√©e la ville rouge, est une destination fascinante qui m√™le traditions berb√®res et influences arabes. Promenez-vous dans les souks anim√©s, visitez le Jardin Majorelle ou d√©tendez-vous dans un hammam traditionnel.</p>',
      price: 799000,
      duration: 7,
      coverImage: 'https://images.unsplash.com/photo-1597211684565-dca64d72bdfe',
      gallery: [
        'https://images.unsplash.com/photo-1598459590364-74282376cf98',
        'https://images.unsplash.com/photo-1655666017544-da95c54f3bd4',
        'https://images.unsplash.com/photo-1539020140153-e8910f507492'
      ],
      bestSeason: 'Printemps, Automne',
      featured: true,
      rating: 4.8,
      included: ['Vols A/R inclus', 'H√¥tel 4 √©toiles', 'Visites guid√©es'],
      excluded: ['D√©penses personnelles', 'Repas non inclus'],
      deadline: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 jours dans le futur
    },
    {
      id: '2',
      slug: 'bali',
      name: 'Bali',
      description: 'L\'√Æle des dieux vous accueille pour un s√©jour m√™lant spiritualit√©, plages paradisiaques et rizi√®res.',
      content: '<p>Bali est une destination id√©ale pour se ressourcer. D√©couvrez ses temples ancestraux, ses plages de sable fin et ses rizi√®res en terrasses. Immergez-vous dans la culture balinaise lors d\'une c√©r√©monie traditionnelle.</p>',
      price: 1299000,
      duration: 12,
      coverImage: 'https://images.unsplash.com/photo-1557093793-e196ae071479',
      gallery: [
        'https://images.unsplash.com/photo-1520222340026-5ebde820fea8',
        'https://images.unsplash.com/photo-1552733407-5d5c46c3bb3b',
        'https://images.unsplash.com/photo-1537996194471-e657df975ab4'
      ],
      bestSeason: 'Mai-Septembre',
      featured: true,
      rating: 4.9,
      included: ['Vols A/R inclus', 'H√¥tel 5 √©toiles', 'Excursions guid√©es'],
      excluded: ['D√©penses personnelles', 'Repas non inclus']
    },
    {
      id: '3',
      slug: 'santorini',
      name: 'Santorin',
      description: 'D√©couvrez les maisons blanches, les coupoles bleues et les couchers de soleil spectaculaires.',
      content: '<p>Santorin est l\'une des √Æles les plus romantiques de Gr√®ce. Ses villages perch√©s sur les falaises offrent une vue imprenable sur la mer √âg√©e. Profitez de ses plages volcaniques et de sa gastronomie locale.</p>',
      price: 1099500,
      duration: 8,
      coverImage: 'https://images.unsplash.com/photo-1570077188670-e3a8d69ac5ff',
      gallery: [
        'https://images.unsplash.com/photo-1515488764276-beab7607c1e6',
        'https://images.unsplash.com/photo-1613395877344-13d4a8e0d49e',
        'https://images.unsplash.com/photo-1555503679-9576d2feb5c2'
      ],
      bestSeason: 'Mai-Octobre',
      featured: true,
      rating: 4.7,
      included: ['Vols A/R inclus', 'H√¥tel de charme', 'Croisi√®re dans les √Æles'],
      excluded: ['D√©penses personnelles', 'Repas non inclus']
    },
  ];
};

// Fonction de secours qui renvoie des offres sp√©ciales fictives en cas d'√©chec de connexion √† l'API
const getFallbackDeals = () => {
  console.log('Utilisation des offres sp√©ciales de secours...');
  return [
    {
      id: "deal1",
      title: "Week-end √† Paris",
      description: "Escapade romantique de 3 jours dans la ville lumi√®re",
      destination: "Paris, France",
      originalPrice: 4500000,
      discountedPrice: 3490000,
      discountPercentage: 22,
      validUntil: "2023-12-31",
      imageUrl: "https://images.unsplash.com/photo-1502602898657-3e91760cbb34?q=80&w=1000&auto=format&fit=crop"
    },
    {
      id: "deal2",
      title: "Aventure √† Bali",
      description: "10 jours de d√©tente et d'exploration",
      destination: "Bali, Indon√©sie",
      originalPrice: 1200500,
      discountedPrice: 899000,
      discountPercentage: 25,
      validUntil: "2023-11-30",
      imageUrl: "https://images.unsplash.com/photo-1573790387438-4da905039392?q=80&w=1000&auto=format&fit=crop"
    },
    {
      id: "deal3",
      title: "S√©jour √† Santorin",
      description: "7 jours dans le joyau des Cyclades",
      destination: "Santorin, Gr√®ce",
      originalPrice: 950000,
      discountedPrice: 799500,
      discountPercentage: 16,
      validUntil: "2024-01-15",
      imageUrl: "https://images.unsplash.com/photo-1570077188670-e3a8d69ac5ff?q=80&w=1000&auto=format&fit=crop"
    }
  ];
};

// Ajout d'un TTL (Time To Live) pour le cache des donn√©es
const CACHE_TTL = 3600000; // 1 heure en millisecondes
let cachedDestinations: Destination[] | null = null;
let lastCacheTime = 0;

// Ajout d'un cache sp√©cifique pour les offres sp√©ciales
let cachedDeals: Deal[] | null = null;
let lastDealsCacheTime = 0;

// Utilise la fonction 'cache' de Next.js pour mettre en cache les r√©sultats
export const fetchAllDestinations = cache(async (): Promise<Destination[]> => {
  try {
    // Utiliser le cache si disponible et pas expir√©
    const now = Date.now();
    if (cachedDestinations && (now - lastCacheTime < CACHE_TTL)) {
      logGoogleSheetsService('Utilisation des donn√©es en cache...');
      return cachedDestinations;
    }

    logGoogleSheetsService('üîÑ D√©marrage de la r√©cup√©ration des donn√©es depuis Google Sheets...');
    logGoogleSheetsService(`Tentative de connexion √† Google Sheets avec l'email: ${GOOGLE_CLIENT_EMAIL}`);
    logGoogleSheetsService(`ID de la feuille utilis√©e: ${SHEET_ID}`);
    
    const jwt = createJWTClient();
    if (!jwt) {
      logGoogleSheetsService('‚ùå Impossible de cr√©er le client JWT - utilisation des donn√©es de secours');
      return getFallbackDestinations();
    }
    
    logGoogleSheetsService('üìÑ Initialisation du document Google Sheets...');
    const doc = new GoogleSpreadsheet(SHEET_ID, jwt);
    
    try {
      logGoogleSheetsService('‚è≥ Chargement des informations du document...');
      await doc.loadInfo();
      logGoogleSheetsService(`‚úÖ Document charg√© avec succ√®s: "${doc.title}" (${doc.sheetCount} feuilles)`);
      
      // Afficher les noms de toutes les feuilles disponibles pour le diagnostic
      const sheetTitles = doc.sheetsByIndex.map(sheet => sheet.title).join(', ');
      logGoogleSheetsService(`üìã Feuilles disponibles: ${sheetTitles}`);
    } catch (loadError) {
      logGoogleSheetsService(`‚ùå Erreur lors du chargement du document: ${loadError}`);
      if (loadError instanceof Error && loadError.stack) {
        logGoogleSheetsService(`Trace d'erreur: ${loadError.stack}`);
      }
      logGoogleSheetsService('‚û°Ô∏è Utilisation des donn√©es de secours suite √† l\'√©chec de chargement');
      return getFallbackDestinations();
    }
    
    const sheet = doc.sheetsByTitle['destinations'];
    if (!sheet) {
      logGoogleSheetsService('‚ùå Feuille "destinations" non trouv√©e dans le document');
      logGoogleSheetsService('‚û°Ô∏è Utilisation des donn√©es de secours suite √† l\'absence de feuille appropri√©e');
      return getFallbackDestinations();
    }
    
    logGoogleSheetsService(`‚è≥ R√©cup√©ration des lignes de la feuille "${sheet.title}" (${sheet.rowCount} lignes au total)...`);
    const rows = await sheet.getRows();
    logGoogleSheetsService(`‚úÖ ${rows.length} lignes r√©cup√©r√©es avec succ√®s`);
    
    logGoogleSheetsService('üîÑ Transformation des lignes en objets Destination...');
    const destinations = rows.map((row) => ({
      id: row.get('id') || String(Math.random()),
      slug: row.get('slug'),
      name: row.get('name'),
      description: row.get('description'),
      content: row.get('content'),
      price: parseFloat(row.get('price')) || 0,
      duration: parseInt(row.get('duration')) || 0,
      coverImage: row.get('coverImage'),
      gallery: JSON.parse(row.get('gallery') || '[]'),
      bestSeason: row.get('bestSeason') || 'Toute l\'ann√©e',
      featured: row.get('featured') === 'true',
      rating: parseFloat(row.get('rating') || '0'),
      included: JSON.parse(row.get('included') || '[]'),
      excluded: JSON.parse(row.get('excluded') || '[]'),
      deadline: row.get('deadline') || undefined, // R√©cup√©rer la date limite
    }));
    
    // Filtrer les destinations expir√©es
    const activeDestinations = filterExpiredItems(destinations);
    logGoogleSheetsService(`üïí ${destinations.length - activeDestinations.length} destinations filtr√©es car expir√©es`);
    
    // Mettre en cache les r√©sultats
    logGoogleSheetsService(`‚úÖ ${activeDestinations.length} destinations actives mises en cache avec succ√®s`);
    cachedDestinations = activeDestinations;
    lastCacheTime = now;
    return activeDestinations;
  } catch (error) {
    logGoogleSheetsService(`‚ùå Erreur lors de la r√©cup√©ration des destinations: ${error}`);
    if (error instanceof Error && error.stack) {
      logGoogleSheetsService(`Trace d'erreur: ${error.stack}`);
    }
    logGoogleSheetsService('‚û°Ô∏è Utilisation des donn√©es de secours suite √† une erreur g√©n√©rale');
    // Retourner des donn√©es fictives en cas d'erreur
    return getFallbackDestinations();
  }
});

export const fetchTopDestinations = cache(async (): Promise<Destination[]> => {
  try {
    logGoogleSheetsService('üìä R√©cup√©ration des destinations populaires...');
    const destinations = await fetchAllDestinations();
    const topDestinations = destinations.filter(d => d.featured).slice(0, 6);
    logGoogleSheetsService(`‚úÖ ${topDestinations.length} destinations populaires r√©cup√©r√©es`);
    return topDestinations;
  } catch (error) {
    logGoogleSheetsService(`‚ùå Erreur lors de la r√©cup√©ration des destinations populaires: ${error}`);
    return getFallbackDestinations().filter(d => d.featured);
  }
});

export const getDestination = cache(async (slug: string): Promise<Destination | null> => {
  try {
    logGoogleSheetsService(`üîç Recherche de la destination avec le slug: ${slug}`);
    const destinations = await fetchAllDestinations();
    const destination = destinations.find(d => d.slug === slug) || null;
    logGoogleSheetsService(destination ? `‚úÖ Destination "${destination.name}" trouv√©e` : `‚ùå Aucune destination trouv√©e avec le slug: ${slug}`);
    return destination;
  } catch (error) {
    logGoogleSheetsService(`‚ùå Erreur lors de la r√©cup√©ration de la destination ${slug}: ${error}`);
    return getFallbackDestinations().find(d => d.slug === slug) || null;
  }
});

// Fonction pour diagnostiquer les probl√®mes d'acc√®s √† Google Sheets
export const diagnoseGoogleSheets = cache(async (): Promise<{
  success: boolean;
  message: string;
  details?: any;
}> => {
  try {
    logGoogleSheetsService('üîç Diagnostic de connexion Google Sheets d√©marr√©...');
    
    // V√©rifier les variables d'environnement
    if (!SHEET_ID) {
      return { 
        success: false, 
        message: 'ID Google Sheets manquant',
        details: 'La variable d\'environnement GOOGLE_SHEET_ID n\'est pas d√©finie'
      };
    }

    // Afficher une version tronqu√©e de l'ID pour le debugging
    const displayId = SHEET_ID.length > 8 
      ? `${SHEET_ID.substring(0, 4)}...${SHEET_ID.substring(SHEET_ID.length-4)}`
      : SHEET_ID;
    logGoogleSheetsService(`üîë Tentative d'acc√®s au document ID: ${displayId}`);
    
    // Cr√©er le client JWT
    const jwt = createJWTClient();
    if (!jwt) {
      return { 
        success: false, 
        message: 'Impossible de cr√©er le client JWT',
        details: 'V√©rifiez GOOGLE_CLIENT_EMAIL et GOOGLE_PRIVATE_KEY'
      };
    }
    
    // Tenter de charger le document
    const doc = new GoogleSpreadsheet(SHEET_ID, jwt);
    await doc.loadInfo();
    
    // Si on arrive ici, le document est accessible
    return {
      success: true,
      message: `Document "${doc.title}" accessible avec ${doc.sheetCount} feuilles`,
      details: {
        title: doc.title,
        sheetCount: doc.sheetCount,
        sheetTitles: doc.sheetsByIndex.map(s => s.title)
      }
    };
  } catch (error) {
    // Analyser l'erreur pour donner un message plus pr√©cis
    let errorDetails = 'Erreur inconnue';
    let suggestion = '';
    
    if (error instanceof Error) {
      errorDetails = error.message;
      
      // Analyse sp√©cifique pour les codes d'erreur courants
      if (error.message.includes('404') || error.message.includes('not found')) {
        suggestion = 'Le document n\'existe pas ou l\'ID est incorrect. V√©rifiez que l\'ID Google Sheet est correct et que le document existe.';
      } else if (error.message.includes('403') || error.message.includes('forbidden')) {
        suggestion = 'Probl√®me de permissions. V√©rifiez que le document est partag√© avec l\'email du compte de service avec au moins l\'acc√®s "Lecteur".';
      } else if (error.message.includes('401') || error.message.includes('unauthorized')) {
        suggestion = 'Probl√®me d\'authentification. V√©rifiez que les informations d\'identification du compte de service sont correctes.';
      }
    }
    
    return {
      success: false,
      message: '√âchec d\'acc√®s au document Google Sheets',
      details: {
        error: errorDetails,
        suggestion: suggestion || 'V√©rifiez l\'ID du document et les permissions du compte de service.',
        sheetId: SHEET_ID,
        serviceAccount: GOOGLE_CLIENT_EMAIL
      }
    };
  }
});

export const fetchDeals = cache(async (): Promise<Deal[]> => {
  try {
    // Utiliser le cache si disponible et pas expir√©
    const now = Date.now();
    if (cachedDeals && (now - lastDealsCacheTime < CACHE_TTL)) {
      logGoogleSheetsService('Utilisation des offres sp√©ciales en cache...');
      return cachedDeals;
    }

    logGoogleSheetsService('üîÑ D√©marrage de la r√©cup√©ration des offres sp√©ciales depuis Google Sheets...');
    
    const jwt = createJWTClient();
    if (!jwt) {
      logGoogleSheetsService('‚ùå Impossible de cr√©er le client JWT - utilisation des offres sp√©ciales de secours');
      return getFallbackDeals();
    }
    
    logGoogleSheetsService('üìÑ Initialisation du document Google Sheets pour les offres sp√©ciales...');
    const doc = new GoogleSpreadsheet(SHEET_ID, jwt);
    
    try {
      await doc.loadInfo();
      logGoogleSheetsService(`‚úÖ Document charg√© avec succ√®s: "${doc.title}"`);
    } catch (loadError) {
      logGoogleSheetsService(`‚ùå Erreur lors du chargement du document: ${loadError}`);
      return getFallbackDeals();
    }
    
    // Recherche de la feuille "deals" ou "offres" pour les offres sp√©ciales
    const sheet = doc.sheetsByTitle['deals'] || doc.sheetsByTitle['offres'];
    if (!sheet) {
      logGoogleSheetsService('‚ùå Feuille "deals" ou "offres" non trouv√©e dans le document');
      return getFallbackDeals();
    }
    
    logGoogleSheetsService(`‚è≥ R√©cup√©ration des lignes de la feuille "${sheet.title}"...`);
    const rows = await sheet.getRows();
    logGoogleSheetsService(`‚úÖ ${rows.length} offres sp√©ciales r√©cup√©r√©es avec succ√®s`);
    
    logGoogleSheetsService('üîÑ Transformation des lignes en objets d\'offres sp√©ciales...');
    const deals = rows.map((row) => ({
      id: row.get('id') || String(Math.random()),
      title: row.get('title'),
      description: row.get('description'),
      destination: row.get('destination'),
      originalPrice: parseFloat(row.get('originalPrice')) || 0,
      discountedPrice: parseFloat(row.get('discountedPrice')) || 0,
      discountPercentage: parseFloat(row.get('discountPercentage')) || 
                         Math.round((1 - (parseFloat(row.get('discountedPrice')) / parseFloat(row.get('originalPrice')))) * 100),
      validUntil: row.get('validUntil'),
      imageUrl: row.get('imageUrl'),
      deadline: row.get('deadline') || row.get('validUntil') || undefined // Utiliser validUntil comme deadline si deadline n'est pas d√©fini
    }));
    
    // Filtrer les offres invalides et expir√©es
    const validDeals = deals.filter(deal => deal.title && deal.description);
    const activeDeals = filterExpiredItems(validDeals);
    
    // Filtrer √©galement par validUntil
    const currentDate = new Date();
    const finalDeals = activeDeals.filter(deal => {
      if (!deal.validUntil) return true;
      try {
        const validUntilDate = new Date(deal.validUntil);
        return currentDate <= validUntilDate;
      } catch (e) {
        return true;
      }
    });
    
    logGoogleSheetsService(`üïí ${validDeals.length - finalDeals.length} offres filtr√©es car expir√©es`);
    
    // Mettre en cache les r√©sultats
    logGoogleSheetsService(`‚úÖ ${finalDeals.length} offres sp√©ciales valides et actives mises en cache`);
    cachedDeals = finalDeals;
    lastDealsCacheTime = now;
    return finalDeals;
  } catch (error) {
    logGoogleSheetsService(`‚ùå Erreur lors de la r√©cup√©ration des offres sp√©ciales: ${error}`);
    if (error instanceof Error && error.stack) {
      logGoogleSheetsService(`Trace d'erreur: ${error.stack}`);
    }
    logGoogleSheetsService('‚û°Ô∏è Utilisation des offres sp√©ciales de secours suite √† une erreur g√©n√©rale');
    return getFallbackDeals();
  }
});
